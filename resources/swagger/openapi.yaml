openapi: 3.0.0
info:
  title: "Talayan"
  version: "0.0.1"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]
paths:
  /api/v1/yaml-convertor:
    get:
      description: "Convert Yaml file To json to Show it"
      responses:
        default:
          description: "Convert page"
  /api/v1/login:
    post:
      operationId: "login by username and password"
      tags:
        - "User Login"
      summary: "User login by username and password"
      description: "login by username and password User Here"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "09363634297 or majid@gmail.com"
                password:
                  type: string
                  example: "sS12345@"
      responses:
        '201':
          description: "login Successfully"
          content:
            application/json:
              schema:
                type: object
        '200':
          description: "login Successfully"
          content:
            application/json:
              schema:
                type: object
        '422':
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad request"
        '404':
          description: "Resource Not Found"
        '500':
          description: "Server"
  /api/v1/gold-requests:
    get:
      operationId: "getGoldRequests"
      tags:
        - "User GoldRequests"
      summary: "Get a list of gold requests"
      description: "Get a list of gold requests."
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "buyer_gold_request_id"
          in: "query"
          description: "ID of the gold requests of the user information"
          schema:
            type: integer
            format: int64
        - name: "page"
          in: "query"
          description: "page number"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: "Unauthorized. User not authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
    post:
      operationId: "storeGoldRequest"
      tags:
        - "User GoldRequests"
      summary: "Store a new gold request"
      description: "Store a new gold request the authenticated user."
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - type
                - amount
                - price_fee
                - status
              properties:
                type:
                  type: string
                  enum: ["buy","sell"]
                amount:
                  type: string
                price_fee:
                  type: string
                status:
                  type: string
                  enum: ["active",'inactive']
      responses:
        '200':
          description: "Gold Request stored successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
        '403':
          description: "Forbidden. The provided data does not match or an error occurred."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message goes here."
        '422':
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error."
                  errors:
                    type: object
        '404':
          description: "Resource Not Found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message goes here."
  /api/v1/gold-requests/{id}:
    get:
      operationId: "getGoldRequests"
      tags:
        - "User GoldRequests"
      summary: "Get a gold requests"
      description: "Get a gold requests."
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the gold request of the user information"
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: "Unauthorized. User not authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
    put:
      operationId: "UpdateGoldRequests"
      tags:
        - "User GoldRequests"
      summary: "Update a gold request"
      description: "Update a gold request."
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the gold requests of the user information"
          schema:
            type: string
        - name: "amount"
          in: "query"
          description: "amount of the gold requests of the user information"
          schema:
            type: string
        - name: "price_fee"
          in: "query"
          description: "price_fee of the gold requests of the user information"
          schema:
            type: string
        - name: "type"
          in: "query"
          description: "type of the gold requests of the user information"
          schema:
            type: string
            enum: ["buy","sell"]
        - name: "status"
          in: "query"
          description: "status of the gold requests of the user information"
          schema:
            type: string
            enum: ["active","inactive"]
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: "Unauthorized. User not authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
  /api/v1/trades:
    get:
      operationId: "getTrades"
      tags:
        - "User Trades"
      summary: "Get a list of trades"
      description: "Get a list of trades."
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          description: "page number"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: "Unauthorized. User not authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."

    post:
      operationId: "storeTrade"
      tags:
        - "User Trades"
      summary: "Store a new trade"
      description: "Store a new trade the authenticated user."
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - sell_gold_request_id
                - seller_user_id
                - buy_gold_request_id
                - amount
              properties:
                sell_gold_request_id:
                  type: integer
                  format: int64
                seller_user_id:
                  type: integer
                  format: int64
                buy_gold_request_id:
                  type: integer
                  format: int64
                amount:
                  type: string
      responses:
        '200':
          description: "trade stored successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
        '403':
          description: "Forbidden. The provided data does not match or an error occurred."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message goes here."
        '422':
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error."
                  errors:
                    type: object
        '404':
          description: "Resource Not Found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message goes here."
  /api/v1/trades/{id}:
    get:
      operationId: "getTrade"
      tags:
        - "User Trades"
      summary: "Get a trade"
      description: "Get a trade."
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          description: "id of trade"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: string
        '401':
          description: "Unauthorized. User not authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
